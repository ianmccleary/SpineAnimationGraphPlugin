#include "SpineTransitionGraphNode_Result.h"
#include "GraphEditorSettings.h"
#include "Kismet2/BlueprintEditorUtils.h"

void USpineTransitionGraphNode_Result::AllocateDefaultPins()
{
	if (const auto Property = FindFProperty<FProperty>(
		GetClass(),
		GET_MEMBER_NAME_CHECKED(USpineTransitionGraphNode_Result, bCanEnterTransition));
		Property != nullptr)
	{
		const auto K2Schema = Cast<const UEdGraphSchema_K2>(GetGraph()->GetSchema());
		
		// Determine type of Pin for this property
		FEdGraphPinType Type;
		K2Schema->ConvertPropertyToPinType(Property, Type);

		// Create the pin
		const auto Pin = CreatePin(EGPD_Input, Type, Property->GetFName());

		// Assign default value to the pin
		FString LiteralValue;
		FBlueprintEditorUtils::PropertyValueToString_Direct(Property, Property->ContainerPtrToValuePtr<uint8>(this), LiteralValue);
		K2Schema->SetPinAutogeneratedDefaultValue(Pin, LiteralValue);
	}
}

FLinearColor USpineTransitionGraphNode_Result::GetNodeTitleColor() const
{
	return GetDefault<UGraphEditorSettings>()->ResultNodeTitleColor;
}

FText USpineTransitionGraphNode_Result::GetTooltipText() const
{
	return FText::FromString(TEXT("Determines whether this transition should be taken"));
}

FText USpineTransitionGraphNode_Result::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return FText::FromString(TEXT("Result"));
}